diff --git a/libavcodec/mpegutils.c b/libavcodec/mpegutils.c
index 3f94540616..f742450bd8 100644
--- a/libavcodec/mpegutils.c
+++ b/libavcodec/mpegutils.c
@@ -29,6 +29,8 @@
 #include "avcodec.h"
 #include "mpegutils.h"
 
+#include <stego/stego_connector.h>
+
 static int add_mb(AVMotionVector *mb, uint32_t mb_type,
                   int dst_x, int dst_y,
                   int motion_x, int motion_y, int motion_scale,
@@ -113,6 +115,10 @@ void ff_print_debug_info2(AVCodecContext *avctx, AVFrame *pict, uint8_t *mbskip_
                                    (avctx->codec->id == AV_CODEC_ID_H264 ? 0 : 1);
         int mb_x, mb_y, mbcount = 0;
 
+        if(pict->pict_type == AV_PICTURE_TYPE_P) {
+            stego_decode(motion_val, mv_sample_log2, mb_width, mb_height, mv_stride);
+        }
+
         /* size is width * height * 2 * 4 where 2 is for directions and 4 is
          * for the maximum number of MB (4 MB in case of IS_8x8) */
         AVMotionVector *mvs = av_malloc_array(mb_width * mb_height, 2 * 4 * sizeof(AVMotionVector));
diff --git a/libavcodec/mpegvideo.c b/libavcodec/mpegvideo.c
index d4d3bea649..556fcf0855 100644
--- a/libavcodec/mpegvideo.c
+++ b/libavcodec/mpegvideo.c
@@ -50,6 +50,8 @@
 #include "wmv2.h"
 #include <limits.h>
 
+#include <stego/stego_connector.h>
+
 static void dct_unquantize_mpeg1_intra_c(MpegEncContext *s,
                                    int16_t *block, int n, int qscale)
 {
diff --git a/libavcodec/mpegvideo_enc.c b/libavcodec/mpegvideo_enc.c
index 9fdab31a25..769d7b739a 100644
--- a/libavcodec/mpegvideo_enc.c
+++ b/libavcodec/mpegvideo_enc.c
@@ -68,6 +68,8 @@
 #include <limits.h>
 #include "sp5x.h"
 
+#include <stego/stego_connector.h>
+
 #define QUANT_BIAS_SHIFT 8
 
 #define QMAT_SHIFT_MMX 16
@@ -3912,6 +3914,10 @@ static int encode_picture(MpegEncContext *s, int picture_number)
     bits= put_bits_count(&s->pb);
     s->header_bits= bits - s->last_bits;
 
+    if(s->current_picture.f->pict_type == AV_PICTURE_TYPE_P) {
+        stego_encode(s->p_mv_table, s->mb_type, s->mb_width, s->mb_height, s->mb_stride);
+    }
+
     for(i=1; i<context_count; i++){
         update_duplicate_context_after_me(s->thread_context[i], s);
     }
